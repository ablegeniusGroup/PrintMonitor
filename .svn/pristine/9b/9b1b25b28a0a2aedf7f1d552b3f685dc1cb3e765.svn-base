package pos.dongwang.controller;

import javafx.application.Platform;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.property.IntegerProperty;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import pos.dongwang.Main;
import pos.dongwang.dao.PosOrderDao;
import pos.dongwang.dto.IsBilledDto;
import pos.dongwang.dto.PosOrderDto;
import pos.dongwang.enums.PrintStateEnum;
import pos.dongwang.httpUtil.HttpUtil;
import pos.dongwang.model.PosOrder;
import pos.dongwang.model.TGoods;
import pos.dongwang.print.GetPrintOrReportStr;
import pos.dongwang.print.PrintRxTx;
import pos.dongwang.print.PrintRxTxVirtaul;
import pos.dongwang.properties.ReadProperties;
import pos.dongwang.util.AppUtils;

import java.io.IOException;
import java.util.*;


public class OrderListController {

    @FXML
    private TableView<PosOrder> posOrderTab;

    @FXML
    private TableColumn<PosOrder, String> itemDescCol;

    @FXML
    private TableColumn<PosOrder, String> itemTimeCol;

    @FXML
    private TableColumn<PosOrder, String> itemQtyCol;

    @FXML
    private Button printBtn;


    @FXML
    private Label tableNumLab;

    @FXML
    private Label orderTypeLab;


    private Main main;

    private Integer showCount;

    private ObservableList<PosOrder> posOrderData = FXCollections.observableArrayList();


    private VBox posOrderBox;


    public OrderListController() {
    }

    /**
     * 初始化方法
     */
    @FXML
    private void initialize() {

        itemDescCol.setCellValueFactory(cellData -> cellData.getValue().name1Property());
        itemTimeCol.setCellValueFactory(cellData -> cellData.getValue().print_msgProperty());
        itemQtyCol.setCellValueFactory(cellData -> cellData.getValue().seal_countProperty().asString());

    }

    public void setMain(Main main, ObservableList<PosOrder> posOrderData, VBox posOrderBox) {
        this.main = main;
        this.posOrderData = posOrderData;
        this.posOrderBox = posOrderBox;
        tableNumLab.textProperty().setValue("檯号:" + posOrderData.get(0).table_noProperty().getValue() + " ,时间:" + posOrderData.get(0).rt_op_timeProperty().getValue()+" ,人數:"+posOrderData.get(0).person_numProperty().getValue()+" , 菜品記錄數:"+ posOrderData.size());
        tableNumLab.setWrapText(true);
        orderTypeLab.setText(posOrderData.get(0).getOrder_type());
        posOrderTab.setItems(this.posOrderData);
        this.showCount = main.getShowcount();

    }


    @FXML
    public  void removeOrderData() {
        Map<Long,List<PosOrderDto>> posOrderDtos = new HashMap<>();
        IsBilledDto isBilledDto = PosOrderDao.isBilled(posOrderData.get(0).getBill_no(), posOrderData.get(0).getType());
        if(AppUtils.isNotBlank(isBilledDto) && (isBilledDto.getSettled().equals("TRUE") | isBilledDto.getSettled().equals("FALSE"))){
            main.crateAlert("提示", "此臺已結賬", "此臺已結賬，不再打印！");
            main.removePosOrderData(true,this.posOrderData, posOrderBox,posOrderTab);
            return;
        }
        ObservableList<PosOrder> needPrintDatas = FXCollections.observableArrayList();
        if(this.posOrderData.size() >showCount) {
             needPrintDatas.addAll(posOrderData.subList(0,showCount));
        }
        else{
            needPrintDatas.addAll(posOrderData);
        }
        if(needPrintDatas != null && needPrintDatas.size() > 0) {
            List<String> list = new LinkedList<String>();
            needPrintDatas.forEach(posOrder -> {

                String printIitem  = posOrder.getName1() + (AppUtils.isNotBlank(posOrder.getPrint_msg())? "("+ posOrder.getPrint_msg()+" )":"");

//                list.add(posOrder.getName1() + "|R" + posOrder.getSeal_count() + "|R" + posOrder.getPrint_msg());

                if(printIitem.length()>8){
                    list.add(printIitem.substring(0, 8) + "|R"  );
                    list.add(printIitem.substring(7, printIitem.length()) + "|R" + posOrder.getSeal_count() );
                }else{
                    list.add(printIitem + "|R" + posOrder.getSeal_count() );
                }

                if(PosOrderDao.otheridxs.containsKey(posOrder.getOrder_idx())){
                    posOrderDtos.put(posOrder.getOrder_idx(),PosOrderDao.otheridxs.get(posOrder.getOrder_idx()));
                }
            });

            String print = null;
            String printMsg = null;
            try {
                String[] tableStyle = {
                        "~0,170,40",
                        "#BIG",
                        "#CENTER",
                        "$PRN_NAM| |ORDER_TYPE",
                        "#GOHEAD1",
                        "$檯號：|TABLE_NAM| 區域：|ZONE",
                        "#GOHEAD1",
                        "#SMALL",
                        "#LEFT",
                        "$賬單編號：|REF_NUM| 人數：|PERSON",
                        "$BARCODE|/|STATION|-|STAFF| |POSDATE",
                        "#R|2|COMPART",
                        "#BIG",
                        "*菜品名稱|R數量",
                        "#SMALL",
                        "#R|2|COMPART",
                        "#BIG",
                        "%ORDERLIST",
                        "#SMALL",
                        "#R|2|COMPART",
                        "#GOHEAD5",
                        "#CUTPAPER"
                };
                HashMap<String, String> printmessage = new HashMap<String, String>();
                printmessage.put("PRN_NAM", needPrintDatas.get(0).getPrint_name());
                printmessage.put("TABLE_NAM", needPrintDatas.get(0).getTable_no());
                printmessage.put("BARCODE", needPrintDatas.get(0).getBarcode());
                printmessage.put("STATION", needPrintDatas.get(0).getPos_id());
                printmessage.put("ZONE", needPrintDatas.get(0).getZone());
                printmessage.put("REF_NUM", needPrintDatas.get(0).getBill_no());
                printmessage.put("STAFF", needPrintDatas.get(0).getStaff());
                printmessage.put("PERSON", String.valueOf(needPrintDatas.get(0).getPerson_num()));
                printmessage.put("ORDER_TYPE", needPrintDatas.get(0).getOrder_type());
                printmessage.put("POSDATE", needPrintDatas.get(0).getRt_op_time());
                print = GetPrintOrReportStr.TranslateTableStyle(tableStyle, list, null, 1, printmessage);
                printMsg = PrintRxTxVirtaul.getInstance().PrinterCheck();
            } catch (Exception e) {
                e.printStackTrace();
                main.crateAlert("錯誤", "打印機異常", printMsg);
                return;
            }
            if (AppUtils.isNotBlank(printMsg)) {
            main.crateAlert("錯誤", "打印機異常", printMsg);
            return;
        }
        else {
           try {
                PrintRxTxVirtaul.getInstance().localPrint(print);
            } catch (IOException e) {
                main.crateAlert("錯誤", "打印機異常", e.getMessage());
                return;
            }
            if (this.posOrderData.size() > showCount) {
                main.removePosOrderData(false, this.posOrderData, posOrderBox,posOrderTab);
                tableNumLab.textProperty().setValue("檯号:" + posOrderData.get(0).table_noProperty().getValue() + " ,时间:" + posOrderData.get(0).rt_op_timeProperty().getValue() + " ,人數:" + posOrderData.get(0).person_numProperty().getValue() + " , 菜品數量:" + posOrderData.size());
            } else {
                main.removePosOrderData(true, this.posOrderData, posOrderBox,posOrderTab);
            }
            if(posOrderDtos != null && posOrderDtos.size()>0){
              Iterator<Long> idxs =  posOrderDtos.keySet().iterator();
              while(idxs.hasNext()){
                  PosOrderDao.otheridxs.remove(idxs.next());
              }
            }
        }
        }

    }

    @FXML
    public void saleOutFun() throws Exception {
        PosOrder selectPosOrder = posOrderTab.getSelectionModel().getSelectedItem();
        System.out.println(selectPosOrder.getName1());
        if (PosOrderDao.pauseItem(selectPosOrder)) {
            Platform.runLater(() ->  main.crateAlert("暫停", "暫停成功", "菜品已經暫停成功！"));
            String url = ReadProperties.readStringByKey("messageUrl") + "/message/stopOrStartSellingItem";
            if(AppUtils.isNotBlank(url)) {
                List<NameValuePair> nvps = new ArrayList<NameValuePair>();
                nvps.add(new BasicNameValuePair("outline", selectPosOrder.getRegion_id()));
                nvps.add(new BasicNameValuePair("itemCode", selectPosOrder.getGoodsno()));
                nvps.add(new BasicNameValuePair("outlet", selectPosOrder.getBarcode()));
                nvps.add(new BasicNameValuePair("staff", selectPosOrder.getStaff()));
                nvps.add(new BasicNameValuePair("optionType", "STOP"));

                sendRequest(url, nvps);
            }


        }
    }


    private void sendRequest(String url, List<NameValuePair> nvps) {
        Task<Void> progressTask = new Task<Void>() {
            @Override
            protected void succeeded() {

                super.succeeded();

                updateMessage("Succeeded");

            }
            @Override
            protected void cancelled() {

                super.cancelled();

                updateMessage("Cancelled");

            }
            @Override
            protected void failed() {

                super.failed();

                updateMessage("Failed");

            }
            @Override
            protected Void call() throws Exception {
                HttpUtil.post(url, nvps);
                updateMessage("Finish");
                return null;
            }

        };

        new Thread(progressTask).start();
    }


}






